package appleclient.mods.events;

import com.google.common.eventbus.Subscribe;
import java.lang.reflect.Method;
import java.util.ArrayList;

public class EventBus {
   private final ArrayList<Object> registeredObjects = new ArrayList();

   public EventBus(String name) {
   }

   public void register(Object object) {
      this.registeredObjects.add(object);
   }

   public void unregister(Object object) {
      this.registeredObjects.remove(object);
   }

   public void post(Object object) {
      try {
         for(int i = 0; i < this.registeredObjects.size(); ++i) {
            Object clazz = this.registeredObjects.get(i);
            Class originalClazz = clazz.getClass();
            Method[] var8;
            int var7 = (var8 = originalClazz.getMethods()).length;

            for(int var6 = 0; var6 < var7; ++var6) {
               Method method = var8[var6];
               if (method.isAnnotationPresent(Subscribe.class)) {
                  Class[] args = method.getParameterTypes();
                  Class[] var13 = args;
                  int var12 = args.length;

                  for(int var11 = 0; var11 < var12; ++var11) {
                     Class<?> argument = var13[var11];
                     if (argument.getName().equals(object.getClass().getName())) {
                        try {
                           method.invoke(clazz, object);
                        } catch (Exception var15) {
                        }
                     }
                  }
               }
            }
         }
      } catch (Exception var16) {
      }

   }
}
