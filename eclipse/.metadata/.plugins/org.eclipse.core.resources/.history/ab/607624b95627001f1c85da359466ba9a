package appleclient.config;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.Map.Entry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import appleclient.Apple;
import appleclient.mods.Mod;
import appleclient.mods.settings.ColorSetting;
import appleclient.mods.settings.Setting;
import appleclient.mods.settings.SliderSetting;
import appleclient.mods.settings.ToggleSetting;

public class AppleConfig
{
    private Gson gson = new Gson(), prettyGson = new GsonBuilder().setPrettyPrinting().create();
    private File config = new File("optionsapple.txt");
    private JsonParser jsonParser = new JsonParser();
    
    public void saveMods()
    {
        new Thread(() ->
        {
            JsonObject jsonObject = new JsonObject();
            
            for (Mod mod : Apple.CLIENT.modsManager.mods)
            {
                JsonObject jsonMod = new JsonObject();
                jsonMod.addProperty("Enabled", mod.isEnabled());
                jsonObject.add(mod.name, jsonMod);
                
                for (Setting setting : mod.settings)
                {
                    if (setting instanceof ToggleSetting)
                    {
                        ToggleSetting toggleSetting = (ToggleSetting) setting;
                        jsonMod.addProperty(setting.name, toggleSetting.enabled);
                    }

                    else if (setting instanceof SliderSetting)
                    {
                        SliderSetting sliderSetting = (SliderSetting) setting;
                        jsonMod.addProperty(setting.name, sliderSetting.currentValue);
                    }
                    
                    else if (setting instanceof ColorSetting)
                    {
                        ColorSetting colorSetting = (ColorSetting) setting;
                        jsonMod.addProperty(setting.name, colorSetting.red + ";" + colorSetting.green + ";" + colorSetting.blue + ";" + colorSetting.alpha);
                    }
                }
            }
            
            try (PrintWriter printWriter = new PrintWriter(new FileWriter(config)))
            {
                printWriter.println(prettyGson.toJson(jsonObject));
            }
            
            catch (IOException e)
            {
            }
        }).start();
    }

    public void loadMods()
    {
        try (BufferedReader bufferedReader = new BufferedReader(new FileReader(config)))
        {
            JsonObject jsonObject = (JsonObject) this.jsonParser.parse(bufferedReader);
            bufferedReader.close();
            Iterator iterator = jsonObject.entrySet().iterator();

            while (true) {
                Entry entry;
                Mod mod;
                do {
                    if (!iterator.hasNext()) {
                        return;
                    }

                    entry = (Entry) iterator.next();
                    String modName = (String) entry.getKey();
                    if (modName.equals("Key Strokes")) {
                        modName = "Keystrokes";
                    } else if (modName.equals("Boss Bar")) {
                        modName = "Bossbar";
                    } else if (modName.equals("MC Chat")) {
                        modName = "Chat";
                    } else if (modName.equals("Cross Hair")) {
                        modName = "Crosshair";
                    } else if (modName.equals("Name Tags")) {
                        modName = "Nametags";
                    } else if (modName.equals("Score Board")) {
                        modName = "Scoreboard";
                    } else if (modName.equals("Time Clock")) {
                        modName = "Clock";
                    } else if (modName.equals("Hurt Camera")) {
                        modName = "No Hurt Cam";
                    } else if (modName.equals("Anti Snipe")) {
                        modName = "Name Hider";
                    } else if (modName.equals("Clock Timer")) {
                        modName = "Timer Countdown";
                    } else if (modName.equals("Damage Tint")) {
                        modName = "Hit Color";
                    } else if (modName.equals("Damage Indicator")) {
                        modName = "Health Indicator";
                    } else if (modName.equals("Block Overlay")) {
                        modName = "Block Outline";
                    }

                    mod = Apple.CLIENT.getModsManager().getMod(modName);
                } while (mod == null);

                JsonObject jsonMod = (JsonObject) entry.getValue();
                if (jsonMod.get("Enabled").getAsBoolean()) {
                    mod.setEnabled(true);
                } else if (mod.isEnabled()) {
                    mod.setEnabled(false);
                }

                Iterator var9 = mod.getSettings().iterator();

                while (var9.hasNext()) {
                    Setting setting = (Setting) var9.next();

                    try {
                        if (setting.getTypeOfSetting().equals("Check Box")) {
                            setting.setIndex((float) (jsonMod.get(setting.getName()).getAsBoolean() ? 1 : 0));
                            setting.setCheckBoxValue(jsonMod.get(setting.getName()).getAsBoolean());
                        } else if (setting.getTypeOfSetting().equals("Mode")) {
                            setting.setModeValue(jsonMod.get(setting.getName()).getAsString());
                        } else if (setting.getTypeOfSetting().equals("Slider")) {
                            setting.setSliderValue(jsonMod.get(setting.getName()).getAsFloat());
                        } else if (setting.getTypeOfSetting().equals("Text Box")) {
                            setting.setTextBoxValue(jsonMod.get(setting.getName()).getAsString());
                        } else {
                            String[] colors = jsonMod.get(setting.getName()).getAsString().split(", ");
                            int[] intColors = new int[] { Integer.parseInt(colors[0]), Integer.parseInt(colors[1]),
                                    Integer.parseInt(colors[2]) };
                            setting.setColors(intColors);
                        }
                    } catch (Exception var21) {
                    }
                }

                if (mod.hasGUI()) {
                    mod.setPosition(jsonMod.get("Position X").getAsFloat(), jsonMod.get("Position Y").getAsFloat());
                }
            }
        } catch (Exception e)
        {
            
        }

    }
}
