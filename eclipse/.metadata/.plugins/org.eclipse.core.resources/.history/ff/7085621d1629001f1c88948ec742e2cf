package net.minecraft.client.renderer.texture;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.nio.IntBuffer;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.Callable;

import javax.imageio.ImageIO;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL12;
import org.lwjgl.opengl.GL30;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import appleclient.interfaces.IMinecraft;
import net.minecraft.client.renderer.GLAllocation;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.resources.IResource;
import net.minecraft.client.resources.IResourceManager;
import net.minecraft.client.resources.IResourceManagerReloadListener;
import net.minecraft.client.resources.data.TextureMetadataSection;
import net.minecraft.crash.CrashReport;
import net.minecraft.crash.CrashReportCategory;
import net.minecraft.util.ReportedException;
import net.minecraft.util.ResourceLocation;
import optifine.Config;
import optifine.RandomMobs;
import shadersmod.client.ShadersTex;

public class TextureManager implements ITickable, IResourceManagerReloadListener, IMinecraft
{
    private final Map<ResourceLocation, ITextureObject> mipmapTextures = Maps.<ResourceLocation, ITextureObject>newHashMap();
    private final IntBuffer dataBuffer = GLAllocation.createDirectIntBuffer(4194304);
    private final Logger logger = LogManager.getLogger();
    private final Map mapTextureObjects = Maps.newHashMap();
    private final List listTickables = Lists.newArrayList();
    private final Map mapTextureCounters = Maps.newHashMap();
    private IResourceManager theResourceManager;
    private static final String __OBFID = "CL_00001064";

    public TextureManager(IResourceManager resourceManager)
    {
        this.theResourceManager = resourceManager;
    }
    
    public void bindTexture(ResourceLocation resource)
    {
        if (Config.isRandomMobs())
        {
            resource = RandomMobs.getTextureLocation(resource);
        }

        Object object = (ITextureObject)this.mapTextureObjects.get(resource);

        if (object == null)
        {
            object = new SimpleTexture(resource);
            this.loadTexture(resource, (ITextureObject)object);
        }

        if (Config.isShaders())
        {
            ShadersTex.bindTexture((ITextureObject)object);
        }
        else
        {
            TextureUtil.bindTexture(((ITextureObject)object).getGlTextureId());
        }
    }

    public boolean loadTickableTexture(ResourceLocation textureLocation, ITickableTextureObject textureObj)
    {
        if (this.loadTexture(textureLocation, textureObj))
        {
            this.listTickables.add(textureObj);
            return true;
        }
        else
        {
            return false;
        }
    }

    public boolean loadTexture(ResourceLocation textureLocation, final ITextureObject textureObj)
    {
        boolean flag = true;
        ITextureObject itextureobject = textureObj;

        try
        {
            textureObj.loadTexture(this.theResourceManager);
        }
        catch (IOException ioexception)
        {
            logger.warn((String)("Failed to load texture: " + textureLocation), (Throwable)ioexception);
            itextureobject = TextureUtil.missingTexture;
            this.mapTextureObjects.put(textureLocation, itextureobject);
            flag = false;
        }
        catch (Throwable throwable)
        {
            CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Registering texture");
            CrashReportCategory crashreportcategory = crashreport.makeCategory("Resource location being registered");
            crashreportcategory.addCrashSection("Resource location", textureLocation);
            crashreportcategory.addCrashSectionCallable("Texture object class", new Callable()
            {
                private static final String __OBFID = "CL_00001065";
                public String call() throws Exception
                {
                    return textureObj.getClass().getName();
                }
            });
            throw new ReportedException(crashreport);
        }

        this.mapTextureObjects.put(textureLocation, itextureobject);
        return flag;
    }
    

    public void bindTextureMipmap(ResourceLocation resource)
    {
        ITextureObject iTextureObject = this.mipmapTextures.get(resource);

        if (iTextureObject == null)
        {
            iTextureObject = new MipmapSimpleTexture(resource);
            this.loadTextureMipmap(resource, iTextureObject);
        }

        if (Config.isShaders())
        {
            ShadersTex.bindTexture(iTextureObject);
        }
        else
        {
            TextureUtil.bindTexture((iTextureObject).getGlTextureId());
        }
    }

    public boolean loadTextureMipmap(ResourceLocation resourceLocation, final ITextureObject textureObject)
    {
        boolean flag = true;

        try
        {
            ((ITextureObject)textureObject).loadTexture(this.theResourceManager);
        }
        catch (IOException ioexception)
        {
            logger.warn((String)("Failed to load texture: " + resourceLocation), (Throwable)ioexception);
            Object textObject1 = TextureUtil.missingTexture;
            this.mipmapTextures.put(resourceLocation, (ITextureObject)textureObject);
            flag = false;
        }
        catch (Throwable throwable)
        {
            CrashReport crashreport = CrashReport.makeCrashReport(throwable, "Registering texture");
            CrashReportCategory crashreportcategory = crashreport.makeCategory("Resource location being registered");
            crashreportcategory.addCrashSection("Resource location", resourceLocation);
            crashreportcategory.addCrashSectionCallable("Texture object class", new Callable()
            {
                private static final String __OBFID = "CL_00001065";
                public String call()
                {
                    return textureObject.getClass().getName();
                }
            });
            throw new ReportedException(crashreport);
        }

        this.mipmapTextures.put(resourceLocation, (ITextureObject)textureObject);
        return flag;
    }

    public ITextureObject getTexture(ResourceLocation textureLocation)
    {
        return (ITextureObject)this.mapTextureObjects.get(textureLocation);
    }

    public ResourceLocation getDynamicTextureLocation(String name, DynamicTexture texture)
    {
        if (name.equals("logo"))
        {
            texture = Config.getMojangLogoTexture(texture);
        }

        Integer integer = (Integer)this.mapTextureCounters.get(name);

        if (integer == null)
        {
            integer = Integer.valueOf(1);
        }
        else
        {
            integer = Integer.valueOf(integer.intValue() + 1);
        }

        this.mapTextureCounters.put(name, integer);
        ResourceLocation resourcelocation = new ResourceLocation(String.format("dynamic/%s_%d", new Object[] {name, integer}));
        this.loadTexture(resourcelocation, texture);
        return resourcelocation;
    }

    public void tick()
    {
        for (Object itickable : this.listTickables)
        {
            ((ITickable) itickable).tick();
        }
    }

    public void deleteTexture(ResourceLocation textureLocation)
    {
        ITextureObject itextureobject = this.getTexture(textureLocation);

        if (itextureobject != null)
        {
            this.mapTextureObjects.remove(textureLocation);
            TextureUtil.deleteTexture(itextureobject.getGlTextureId());
        }
    }

    public void onResourceManagerReload(IResourceManager resourceManager)
    {
        Config.dbg("*** Reloading textures ***");
        Config.log("Resource packs: " + Config.getResourcePackNames());
        Iterator iterator = this.mapTextureObjects.keySet().iterator();

        while (iterator.hasNext())
        {
            ResourceLocation resourcelocation = (ResourceLocation)iterator.next();
            String s = resourcelocation.getResourcePath();

            if (s.startsWith("mcpatcher/") || s.startsWith("optifine/"))
            {
                ITextureObject itextureobject = (ITextureObject)this.mapTextureObjects.get(resourcelocation);

                if (itextureobject instanceof AbstractTexture)
                {
                    AbstractTexture abstracttexture = (AbstractTexture)itextureobject;
                    abstracttexture.deleteGlTexture();
                }

                iterator.remove();
            }
        }

        for (Object entry : this.mapTextureObjects.entrySet())
        {
            this.loadTexture((ResourceLocation)((Entry) entry).getKey(), (ITextureObject)((Entry) entry).getValue());
        }
    }

    public void reloadBannerTextures()
    {
        for (Object entry : this.mapTextureObjects.entrySet())
        {
            ResourceLocation resourcelocation = (ResourceLocation)((Entry) entry).getKey();
            ITextureObject itextureobject = (ITextureObject)((Entry) entry).getValue();

            if (itextureobject instanceof LayeredColorMaskTexture)
            {
                this.loadTexture(resourcelocation, itextureobject);
            }
        }
    }

    public class MipmapSimpleTexture extends AbstractTexture
    {
        private static final Logger logger = LogManager.getLogger();
        private final ResourceLocation textureLocation;

        public MipmapSimpleTexture(ResourceLocation textureLocation)
        {
            this.textureLocation = textureLocation;
        }

        public void loadTexture(IResourceManager resourceManager) throws IOException
        {
            this.deleteGlTexture();
            InputStream inputstream = null;

            try
            {
                IResource iresource = resourceManager.getResource(this.textureLocation);
                inputstream = iresource.getInputStream();
                BufferedImage bufferedimage = ImageIO.read(inputstream);
                boolean flag = false;
                boolean flag1 = false;

                if (iresource.hasMetadata())
                {
                    try
                    {
                        TextureMetadataSection texturemetadatasection = (TextureMetadataSection)iresource.getMetadata("texture");

                        if (texturemetadatasection != null)
                        {
                            flag = texturemetadatasection.getTextureBlur();
                            flag1 = texturemetadatasection.getTextureClamp();
                        }
                    }
                    catch (RuntimeException runtimeexception)
                    {
                        logger.warn((String)("Failed reading metadata of: " + this.textureLocation), (Throwable)runtimeexception);
                    }
                }

                TextureManager.this.uploadTextureImageAllocateMipMap(this.getGlTextureId(), bufferedimage, flag, flag1);
            }
            finally
            {
                if (inputstream != null)
                {
                    inputstream.close();
                }
            }
        }
    }

    public int uploadTextureImageAllocateMipMap(int glTextureId, BufferedImage textureImage, boolean blur, boolean clamp)
    {
        this.allocateTexture(glTextureId, 0, textureImage.getWidth(), textureImage.getHeight(), 1.0F);
        return this.uploadTextureImageSubMipMap(glTextureId, textureImage, 0, 0, blur, clamp);
    }

    private void allocateTexture(int glTextureId, int p_147946_1_, int p_147946_2_, int p_147946_3_, float p_147946_4_)
    {
        GL11.glDeleteTextures(glTextureId);
        GL11.glBindTexture(GL11.GL_TEXTURE_2D, glTextureId);
        GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, p_147946_2_ >> 0, p_147946_3_ >> 0, 0, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (IntBuffer)((IntBuffer)null));
    }

    private int uploadTextureImageSubMipMap(int glTextureId, BufferedImage image, int p_110995_2_, int p_110995_3_, boolean blur, boolean clamp)
    {
        GL11.glBindTexture(GL11.GL_TEXTURE_2D, glTextureId);
        this.uploadTextureImageSubImplMipMap(image, p_110995_2_, p_110995_3_, blur, clamp);
        GL30.glGenerateMipmap(3553);
        return glTextureId;
    }

    private void uploadTextureImageSubImplMipMap(BufferedImage image, int p_110993_1_, int p_110993_2_, boolean blur, boolean clamp)
    {
        int i = image.getWidth();
        int j = image.getHeight();
        int k = 4194304 / i;
        int[] aint = new int[k * i];
        GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR_MIPMAP_LINEAR);
        this.setTextureClamped(clamp);

        for (int l = 0; l < i * j; l += i * k)
        {
            int i1 = l / i;
            int j1 = Math.min(k, j - i1);
            int k1 = i * j1;
            image.getRGB(0, i1, i, j1, aint, 0, i);
            this.copyToBuffer(aint, k1);
            GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, p_110993_1_, p_110993_2_ + i1, i, j1, GL12.GL_BGRA, GL12.GL_UNSIGNED_INT_8_8_8_8_REV, (IntBuffer)dataBuffer);
        }
    }
    
    private void setTextureClamped(boolean p_110997_0_)
    {
        if (p_110997_0_)
        {
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_CLAMP);
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_CLAMP);
        }
        else
        {
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_REPEAT);
            GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_REPEAT);
        }
    }

    private void copyToBuffer(int[] p_110990_0_, int p_110990_1_)
    {
        this.copyToBufferPos(p_110990_0_, 0, p_110990_1_);
    }

    private void copyToBufferPos(int[] p_110994_0_, int p_110994_1_, int p_110994_2_)
    {
        int[] aint = p_110994_0_;

        if (mc.gameSettings.anaglyph)
        {
            aint = this.updateAnaglyph(p_110994_0_);
        }

        this.dataBuffer.clear();
        this.dataBuffer.put(aint, p_110994_1_, p_110994_2_);
        this.dataBuffer.position(0).limit(p_110994_2_);
    }

    public int[] updateAnaglyph(int[] p_110985_0_)
    {
        int[] aint = new int[p_110985_0_.length];

        for (int i = 0; i < p_110985_0_.length; ++i)
        {
            int j = p_110985_0_[i] >> 24 & 255;
            int k = p_110985_0_[i] >> 16 & 255;
            int l = p_110985_0_[i] >> 8 & 255;
            int i1 = p_110985_0_[i] & 255;
            int j1 = (k * 30 + l * 59 + i1 * 11) / 100;
            int k1 = (k * 30 + l * 70) / 100;
            int l1 = (k * 30 + i1 * 70) / 100;
            aint[i] = j << 24 | j1 << 16 | k1 << 8 | l1;
        }

        return aint;
    }
}
