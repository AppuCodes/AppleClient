package appleclient.mods.impl;

import appleclient.mods.Mod;
import net.java.games.input.Controller;
import net.java.games.input.Controller.Type;
import net.java.games.input.ControllerEnvironment;
import net.java.games.input.Mouse;
import net.minecraft.util.MouseHelper;
import net.minecraft.util.Util;

public class RawInput extends Mod
{
    private volatile boolean enabled = false;
    private int deltaX = 0, deltaY = 0;
    private Controller[] controllers;
    private Mouse mouse;
    
    public RawInput()
    {
        super("Raw Input");
    }
    
    @Override
    public void onEnable()
    {
        super.onEnable();
        
        if (!Util.getOSType().equals(Util.EnumOS.UNKNOWN) && mc.thePlayer != null)
        {
            enabled = true;
            mc.mouseHelper = new RawMouseHelper();
            controllers = ControllerEnvironment.getDefaultEnvironment().getControllers();
            
            new Thread(() ->
            {
                while (enabled)
                {
                    for (Controller controller : controllers)
                    {
                        if (controller.getType() == Type.MOUSE)
                        {
                            controller.poll();
                            Mouse controllerMouse = (Mouse) controller;
                            
                            if (controllerMouse.getX().getPollData() != 0.0F || controllerMouse.getY().getPollData() != 0.0F)
                            {
                                mouse = controllerMouse;
                                break;
                            }
                        }
                    }
                    
                    if (mouse != null)
                    {
                        mouse.poll();
                        
                        if (mc.currentScreen == null)
                        {
                            deltaX += (int) mouse.getX().getPollData();
                            deltaY += (int) mouse.getY().getPollData();
                        }
                    }
                    
                    try
                    {
                        Thread.sleep(1);
                    } catch (Exception e) {}
                }
            }).start();
        }
    }
    
    @Subscribe
    public void onWorldChange(EventWorldChange e)
    {
        
    }
    
    
    
    @Override
    public void onDisable()
    {
        super.onDisable();
        
        if (!Util.getOSType().equals(Util.EnumOS.UNKNOWN) && enabled)
        {
            mc.mouseHelper = new MouseHelper();
            enabled = false;
        }
    }
    
    public class RawMouseHelper extends MouseHelper
    {
        private RawInput rawInput = RawInput.this;
        
        public void mouseXYChange()
        {
           deltaX = rawInput.deltaX;
           deltaY = -rawInput.deltaY;
           rawInput.deltaX = 0;
           rawInput.deltaY = 0;
        }
     }
}
